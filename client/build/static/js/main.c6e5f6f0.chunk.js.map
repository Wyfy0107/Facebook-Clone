{"version":3,"sources":["components/Login.js","components/Register.js","graphQL/Operation.js","components/comment-component/Comment.js","components/protected-routes/NewsFeedPost.js","components/protected-routes/NewsFeed.js","components/post-layout/Post.js","components/post-layout/PostLayout.js","components/protected-routes/Profile.js","components/protected-routes/Layout.js","App.js","index.js"],"names":["Input","styled","input","LoginForm","div","Login","setAuth","useState","email","setEmail","password","setPassword","type","placeholder","onChange","e","target","value","Button","style","margin","onClick","alert","axios","post","then","res","data","catch","err","console","log","to","RegisterForm","Register","isRegister","setRegister","message","GET_USER_POSTS","gql","GET_ALL_POSTS","GET_COMMENT","GET_LIKE","ADD_POST","DELETE_POST","ADD_COMMENT","UPDATE_LIKE","POST_SUBSCRIPTION","CommentSection","CommentWrapper","Comment","commentList","postId","comment","setComment","userEmail","setUserEmail","comList","setComList","useMutation","addComment","newComment","useEffect","getUserProfile","copyComment","newCom","push","get","variables","id","fetchPolicy","size","map","index","key","PostWrapper","NewsFeedPost","likes","setLikes","commentArray","showComment","setShow","likeNumber","useQuery","comments","updateLike","content","display","flexFlow","justifyContent","width","amount","backgroundColor","height","NewsFeed","posts","setPosts","error","loading","marginTop","Post","deletePost","length","copy","deletedPostIndex","findIndex","splice","del","PostLayout","newPost","useSubscription","user","postList","postCopy","newPostAdded","PostSection","PostInput","Profile","postContent","setPostContent","useLazyQuery","getUserPosts","addPost","position","top","Layout","Nav","background","alignItems","fontSize","className","activeKey","Item","path","exact","App","isAuthenticated","setAuthenticate","keepLoggedIn","document","cookie","split","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","splitLink","query","definition","getMainDefinition","kind","operation","link","ApolloLink","from","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c6e5f6f0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst Input = styled.input`\r\n  border-radius: 6px;\r\n  outline: none;\r\n  height: 3rem;\r\n  width: 15rem;\r\n`;\r\n\r\nconst LoginForm = styled.div`\r\n  position: relative;\r\n  top: 3rem;\r\n`;\r\n\r\nfunction Login({ setAuth }) {\r\n  const [email, setEmail] = useState(null);\r\n  const [password, setPassword] = useState(null);\r\n\r\n  const login = () => {\r\n    if (!email && !password) return alert(\"please fill in email and password\");\r\n\r\n    axios\r\n      .post(\"/login\", {\r\n        email: email,\r\n        password: password,\r\n      })\r\n      .then(res => {\r\n        if (res.data === \"success\") {\r\n          setAuth(true);\r\n        }\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n  return (\r\n    <LoginForm>\r\n      <h1>Login</h1>\r\n      <Input\r\n        type='text'\r\n        placeholder='email'\r\n        onChange={e => setEmail(e.target.value)}\r\n      />\r\n      <br />\r\n      <Input\r\n        type='password'\r\n        placeholder='password'\r\n        onChange={e => setPassword(e.target.value)}\r\n      />\r\n      <br />\r\n      <Button style={{ margin: \"5px\" }} onClick={login}>\r\n        Login\r\n      </Button>\r\n      <br />\r\n      <Link to='/register'>Register</Link>\r\n    </LoginForm>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst RegisterForm = styled.div`\r\n  position: relative;\r\n  top: 3rem;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  border-radius: 6px;\r\n  outline: none;\r\n  height: 3rem;\r\n  width: 15rem;\r\n`;\r\n\r\nfunction Register() {\r\n  const [email, setEmail] = useState(null);\r\n  const [password, setPassword] = useState(null);\r\n  const [isRegister, setRegister] = useState(false);\r\n\r\n  const register = () => {\r\n    if (!email && !password) return alert(\"please fill in email and password\");\r\n    axios\r\n      .post(\"/register\", {\r\n        email: email,\r\n        password: password,\r\n      })\r\n      .then(res => {\r\n        alert(\"success\");\r\n        setRegister(true);\r\n      })\r\n      .catch(err => alert(err.message));\r\n  };\r\n\r\n  return isRegister ? (\r\n    <Redirect to='/' />\r\n  ) : (\r\n    <RegisterForm>\r\n      <h1>Register</h1>\r\n      <Input\r\n        type='text'\r\n        placeholder='email'\r\n        onChange={e => setEmail(e.target.value)}\r\n      />\r\n      <br />\r\n      <Input\r\n        type='password'\r\n        placeholder='password'\r\n        onChange={e => setPassword(e.target.value)}\r\n      />\r\n      <br />\r\n      <Button style={{ margin: \"5px\" }} onClick={register}>\r\n        Register\r\n      </Button>\r\n      <br />\r\n      <Link to='/'>Login</Link>\r\n    </RegisterForm>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","import { gql } from \"@apollo/client\";\r\n\r\n//Query\r\nexport const GET_USER_POSTS = gql`\r\n  query User($email: String) {\r\n    user(email: $email) {\r\n      email\r\n      posts {\r\n        id\r\n        content\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_ALL_POSTS = gql`\r\n  query GET_ALL_POSTS {\r\n    posts {\r\n      id\r\n      email\r\n      content\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_COMMENT = gql`\r\n  query GET_COMMENT($id: String) {\r\n    commentList(id: $id) {\r\n      commentList {\r\n        email\r\n        comment\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_LIKE = gql`\r\n  query GET_LIKE($id: String) {\r\n    likes(id: $id) {\r\n      likes\r\n    }\r\n  }\r\n`;\r\n\r\n//Mutation\r\nexport const ADD_POST = gql`\r\n  mutation addPost($email: String, $content: String) {\r\n    addPost(email: $email, content: $content) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_POST = gql`\r\n  mutation DELETE_POST($id: String) {\r\n    deletePost(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\nexport const ADD_COMMENT = gql`\r\n  mutation ADD_COMMENT($id: String, $email: String, $comment: String) {\r\n    addComment(id: $id, email: $email, comment: $comment) {\r\n      email\r\n      comment\r\n    }\r\n  }\r\n`;\r\n\r\nexport const UPDATE_LIKE = gql`\r\n  mutation UPDATE_LIKE($id: String, $amount: Int) {\r\n    updateLike(id: $id, amount: $amount) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\n//Subscription\r\nexport const POST_SUBSCRIPTION = gql`\r\n  subscription POST_SUBSCRIPTION {\r\n    newPostAdded {\r\n      __typename\r\n      id\r\n      content\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { ADD_COMMENT } from \"../../graphQL/Operation\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport axios from \"axios\";\r\n\r\nconst CommentSection = styled.div`\r\n  display: flex;\r\n  flex-flow: column;\r\n`;\r\n\r\nconst CommentWrapper = styled.div`\r\n  margin: 5px;\r\n  background: #3a3b3c;\r\n  border-radius: 10px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 50%;\r\n  margin: auto;\r\n`;\r\n\r\nfunction Comment({ commentList, postId }) {\r\n  const [comment, setComment] = useState(null);\r\n  const [userEmail, setUserEmail] = useState(null);\r\n  const [comList, setComList] = useState(null);\r\n  //mutation\r\n  const [addComment, { data: newComment }] = useMutation(ADD_COMMENT);\r\n\r\n  useEffect(() => {\r\n    setComList(commentList);\r\n    getUserProfile();\r\n    if (newComment && comList) {\r\n      const copyComment = [...comList];\r\n      const newCom = {\r\n        email: newComment.addComment.email,\r\n        comment: newComment.addComment.comment,\r\n      };\r\n      copyComment.push(newCom);\r\n      setComList(copyComment);\r\n    }\r\n  }, [userEmail, newComment]);\r\n\r\n  const sendComment = () => {\r\n    addComment({\r\n      variables: { id: postId, email: userEmail, comment: comment },\r\n      fetchPolicy: \"no-cache\",\r\n    });\r\n  };\r\n  const getUserProfile = () => {\r\n    axios\r\n      .get(\"/api/profile\")\r\n      .then(res => {\r\n        setUserEmail(res.data.email);\r\n      })\r\n      .catch(err => {\r\n        alert(\"please login again\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <CommentSection>\r\n      <div>\r\n        <Input type='text' onChange={e => setComment(e.target.value)} />\r\n        <Button onClick={sendComment} size='sm' style={{ margin: \"5px\" }}>\r\n          Add\r\n        </Button>\r\n      </div>\r\n      {comList &&\r\n        comList.map((comment, index) => (\r\n          <CommentWrapper key={index}>\r\n            {comment.email}\r\n            <br />\r\n            {comment.comment}\r\n          </CommentWrapper>\r\n        ))}\r\n    </CommentSection>\r\n  );\r\n}\r\n\r\nexport default Comment;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { GET_LIKE, UPDATE_LIKE, GET_COMMENT } from \"../../graphQL/Operation\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Comment from \"../comment-component/Comment\";\r\n\r\nconst PostWrapper = styled.div`\r\n  display: flex;\r\n  flex-flow: column;\r\n  background: #242526;\r\n  width: 32vw;\r\n  margin: 1rem auto 1rem;\r\n  border-radius: 10px;\r\n  padding: 5px;\r\n`;\r\n\r\nfunction NewsFeedPost({ post }) {\r\n  const [likes, setLikes] = useState(0);\r\n  const [commentArray, setComment] = useState(null);\r\n  const [showComment, setShow] = useState(false);\r\n\r\n  //query\r\n  const { data: likeNumber } = useQuery(GET_LIKE, {\r\n    variables: { id: post.id },\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n\r\n  const { data: comments } = useQuery(GET_COMMENT, {\r\n    variables: { id: post.id },\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n\r\n  //mutation\r\n  const [updateLike] = useMutation(UPDATE_LIKE);\r\n\r\n  useEffect(() => {\r\n    if (likeNumber) {\r\n      setLikes(likeNumber.likes[0].likes);\r\n    }\r\n\r\n    if (comments && comments.commentList) {\r\n      setComment(comments.commentList.commentList);\r\n    }\r\n  }, [likeNumber, comments]);\r\n\r\n  const likeHandler = () => {\r\n    setLikes(\r\n      likes + 1,\r\n      updateLike({ variables: { id: post.id, amount: likes + 1 } })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PostWrapper key={post.id}>\r\n        <h4>{post.email}</h4>\r\n        <p>{post.content}</p>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexFlow: \"row\",\r\n            justifyContent: \"space-between\",\r\n          }}\r\n        >\r\n          <Button size='sm' style={{ width: \"20%\" }} onClick={likeHandler}>\r\n            Like\r\n          </Button>\r\n          <p>{likes} likes</p>\r\n          <Button\r\n            size='sm'\r\n            style={{ width: \"20%\" }}\r\n            onClick={() => setShow(!showComment)}\r\n          >\r\n            Comments\r\n          </Button>\r\n        </div>\r\n        <div style={{ display: showComment ? \"block\" : \"none\" }}>\r\n          <hr style={{ backgroundColor: \"white\", width: \"80%\" }} />\r\n          <Comment\r\n            postId={post.id}\r\n            commentList={commentArray}\r\n            style={{ height: \"100%\" }}\r\n          />\r\n        </div>\r\n      </PostWrapper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewsFeedPost;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { GET_ALL_POSTS } from \"../../graphQL/Operation\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport NewsFeedPost from \"./NewsFeedPost\";\r\n\r\nfunction NewsFeed() {\r\n  const [posts, setPosts] = useState(null);\r\n  const { data, error, loading } = useQuery(GET_ALL_POSTS, {\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setPosts(data.posts);\r\n    }\r\n  }, [data]);\r\n\r\n  if (error) {\r\n    console.log(error);\r\n  }\r\n  if (loading) return <p>Loading...</p>;\r\n\r\n  return (\r\n    <div style={{ marginTop: \"3rem\" }}>\r\n      {posts && posts.map(post => <NewsFeedPost key={post.id} post={post} />)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewsFeed;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { DELETE_POST, UPDATE_LIKE, GET_LIKE } from \"../../graphQL/Operation\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst PostWrapper = styled.div`\r\n  display: flex;\r\n  flex-flow: column;\r\n  background: #242526;\r\n  width: 25vw;\r\n  margin: 1rem auto 1rem;\r\n  border-radius: 10px;\r\n  padding: 5px;\r\n`;\r\n\r\nfunction Post({ post, posts, email, setPosts }) {\r\n  const [deletePost] = useMutation(DELETE_POST);\r\n  const { data: likeNumber } = useQuery(GET_LIKE, {\r\n    variables: { id: post.id },\r\n    fetchPolicy: \"no-cache\",\r\n  });\r\n  const [updateLike] = useMutation(UPDATE_LIKE);\r\n\r\n  const [likes, setLikes] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (likeNumber && likeNumber.likes.length !== 0) {\r\n      setLikes(likeNumber.likes[0].likes);\r\n    }\r\n  }, [likeNumber]);\r\n\r\n  const del = id => {\r\n    const copy = [...posts];\r\n    let deletedPostIndex = copy.findIndex(post => post.id === id);\r\n    copy.splice(deletedPostIndex, 1);\r\n    setPosts(copy);\r\n  };\r\n\r\n  const likeHandler = () => {\r\n    setLikes(\r\n      likes + 1,\r\n      updateLike({ variables: { id: post.id, amount: likes + 1 } })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PostWrapper key={post.id}>\r\n        <h4>{email}</h4>\r\n        <p>{post.content}</p>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexFlow: \"row\",\r\n            justifyContent: \"space-between\",\r\n          }}\r\n        >\r\n          <Button size='sm' style={{ width: \"20%\" }} onClick={likeHandler}>\r\n            Like\r\n          </Button>\r\n          <p>{likes} likes</p>\r\n          <Button\r\n            size='sm'\r\n            style={{ width: \"20%\" }}\r\n            onClick={() => {\r\n              deletePost({\r\n                variables: { id: post.id },\r\n                fetchPolicy: \"no-cache\",\r\n              });\r\n              del(post.id);\r\n            }}\r\n          >\r\n            Delete\r\n          </Button>\r\n        </div>\r\n      </PostWrapper>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { POST_SUBSCRIPTION } from \"../../graphQL/Operation\";\r\nimport { useSubscription } from \"@apollo/client\";\r\nimport Post from \"./Post\";\r\n\r\nfunction PostLayout({ email, data }) {\r\n  const [posts, setPosts] = useState(null);\r\n\r\n  const { data: newPost } = useSubscription(POST_SUBSCRIPTION);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      const { user } = data;\r\n      const postList = [...user[0].posts];\r\n      setPosts(postList);\r\n    }\r\n    if (newPost) {\r\n      const postCopy = [...posts];\r\n      postCopy.push(newPost.newPostAdded);\r\n      setPosts(postCopy);\r\n    }\r\n  }, [data, newPost]);\r\n\r\n  return (\r\n    <div>\r\n      {posts &&\r\n        posts.map(post => (\r\n          <Post\r\n            key={post.id}\r\n            post={post}\r\n            email={email}\r\n            setPosts={setPosts}\r\n            posts={posts}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostLayout;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { GET_USER_POSTS, ADD_POST } from \"../../graphQL/Operation\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport PostLayout from \"../post-layout/PostLayout\";\r\n\r\nconst PostSection = styled.div`\r\n  background: #242526;\r\n  width: 30vw;\r\n  margin: auto;\r\n  position: relative;\r\n  top: 2rem;\r\n  border-radius: 10px;\r\n  padding: 0.5rem;\r\n`;\r\n\r\nconst PostInput = styled.input`\r\n  border-radius: 10px;\r\n  outline: none;\r\n  width: 15rem;\r\n  height: 3rem;\r\n  margin: 0.5rem;\r\n`;\r\n\r\nfunction Profile({ setAuth }) {\r\n  const [userEmail, setUserEmail] = useState(null);\r\n  const [postContent, setPostContent] = useState(null);\r\n  //prettier-ignore\r\n  const [getUserPosts,{ loading, error, data,  },] = useLazyQuery(GET_USER_POSTS);\r\n  const [addPost] = useMutation(ADD_POST);\r\n\r\n  useEffect(() => {\r\n    getUserProfile();\r\n    if (userEmail) {\r\n      getUserPosts({\r\n        variables: { email: userEmail },\r\n        fetchPolicy: \"no-cache\",\r\n      });\r\n    }\r\n  }, [userEmail]);\r\n\r\n  const getUserProfile = () => {\r\n    axios\r\n      .get(\"/api/profile\")\r\n      .then(res => {\r\n        setUserEmail(res.data.email);\r\n      })\r\n      .catch(err => {\r\n        setAuth(false);\r\n        alert(\"please login again\");\r\n      });\r\n  };\r\n\r\n  const add = () => {\r\n    if (!postContent) {\r\n      alert(\"please fill posts\");\r\n    } else {\r\n      addPost({ variables: { email: userEmail, content: postContent } });\r\n    }\r\n  };\r\n\r\n  const logOut = () => {\r\n    setAuth(false);\r\n    axios.post(\"/logout\").catch(err => console.log(err));\r\n  };\r\n\r\n  if (loading) {\r\n    return <p>Loading...</p>;\r\n  }\r\n  if (error) {\r\n    console.log(error);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexFlow: \"column\",\r\n          justifyContent: \"space-around\",\r\n        }}\r\n      >\r\n        <div>\r\n          <PostSection>\r\n            <PostInput onChange={e => setPostContent(e.target.value)} />\r\n            <br />\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexFlow: \"row\",\r\n                justifyContent: \"space-around\",\r\n              }}\r\n            >\r\n              <Button onClick={add}>Post</Button>\r\n              <Button onClick={logOut}>Log out</Button>\r\n            </div>\r\n          </PostSection>\r\n        </div>\r\n\r\n        <div style={{ position: \"relative\", top: \"6rem\" }}>\r\n          <PostLayout email={userEmail} data={data} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport NewsFeed from \"./NewsFeed\";\r\nimport Profile from \"./Profile\";\r\nimport { Switch, Route, Link } from \"react-router-dom\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nfunction Layout({ setAuth }) {\r\n  return (\r\n    <div>\r\n      <Nav\r\n        style={{\r\n          background: \"#242526\",\r\n          height: \"8vh\",\r\n          alignItems: \"center\",\r\n          fontSize: \"1.3rem\",\r\n        }}\r\n        className='justify-content-center'\r\n        activeKey='/home'\r\n      >\r\n        <Nav.Item>\r\n          <Link style={{ margin: \"1rem\" }} to='/dashboard/newsfeed'>\r\n            NewsFeed\r\n          </Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Link style={{ margin: \"1rem\" }} to='/dashboard'>\r\n            Profile\r\n          </Link>\r\n        </Nav.Item>\r\n      </Nav>\r\n\r\n      <Switch>\r\n        <Route path='/dashboard/newsfeed'>\r\n          <NewsFeed setAuth={setAuth} />\r\n        </Route>\r\n        <Route exact path='/dashboard'>\r\n          <Profile setAuth={setAuth} />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Layout;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport Register from \"./components/Register\";\nimport Layout from \"./components/protected-routes/Layout\";\n\nfunction App() {\n  const [isAuthenticated, setAuthenticate] = useState(true);\n\n  useEffect(() => keepLoggedIn(), []);\n\n  const keepLoggedIn = () => {\n    const cookie = document.cookie;\n    const token = cookie.split(\"=\")[1];\n    if (!token) {\n      setAuthenticate(false);\n    }\n  };\n\n  return (\n    <div className='App'>\n      <Switch>\n        <Route exact path='/'>\n          {isAuthenticated ? (\n            <Redirect to='/dashboard' />\n          ) : (\n            <Login setAuth={setAuthenticate} />\n          )}\n        </Route>\n\n        <Route path='/dashboard'>\n          {isAuthenticated ? (\n            <Layout setAuth={setAuthenticate} />\n          ) : (\n            <Redirect to='/' />\n          )}\n        </Route>\n\n        <Route path='/register'>\n          <Register />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  ApolloLink,\n} from \"@apollo/client\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { split, HttpLink } from \"@apollo/client\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\n\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:7000/graphql\",\n});\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:7000/graphql`,\n  options: {\n    reconnect: true,\n  },\n});\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    );\n  },\n  wsLink,\n  httpLink\n);\n\nconst link = ApolloLink.from([splitLink]);\n\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Router>\n        <App />\n      </Router>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}